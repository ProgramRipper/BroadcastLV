[project]
name = "BroadcastLV"
version = "0.1.0"
description = ""
authors = [{ name = "ProgramRipper", email = "programripper@foxmail.com" }]
dependencies = [
    "brotli~=1.0",
    "msgspec~=0.12",
    "typing-extensions~=4.4; python_version < '3.11'",
    "protobuf~=4.21",
]
requires-python = ">=3.10"
license = { text = "MIT" }

[project.optional-dependencies]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[tool]

[tool.pdm]
include = ["broadcastlv"]

[tool.pdm.scripts]
test = "pytest {args}"
lint = { composite = ["black .", "isort ."] }

[tool.pdm.dev-dependencies]
dev = [
    "black~=22.12",
    "isort~=5.12",
    "pytest~=7.2",
    "pytest-cov~=4.0",
]

[tool.coverage.run]
branch = true
omit = ["broadcastlv/command/*", "tests/*", "test.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "^ *\\.\\.\\.$",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload",
    # don't complain __repr__ and __str__ and __repr_args__ for representation
    "def __repr__\\(self\\).+",
    # Don't complain about import fallback
    "except ImportError:",
    # Don't complain if code isn't run on some Python versions
    "if sys\\.version_info",
]
partial_branches = ["pragma: worst case"]
precision = 2

[tool.pytest.ini_options]
addopts = [
    "-vv",
    "--cov=broadcastlv",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
python_files = "tests/*"
filterwarnings = ["ignore::RuntimeWarning"]

[tool.black]
extend-exclude = "^.*_pb2\\.py(i?)$"

[tool.isort]
profile = "black"
extend_skip_glob = ["**/*_pb2.py", "**/*_pb2.pyi"]

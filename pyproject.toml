[project]
name = "BroadcastLV"
version = "0.1.0"
description = ""
authors = [{ name = "ProgramRipper", email = "programripper@foxmail.com" }]
dependencies = [
    "brotli~=1.0",
    "msgspec~=0.11",
]
requires-python = ">=3.11"
license = { text = "MIT" }
[project.optional-dependencies]

[build-system]
requires = ["pdm-pep517>=1.0.0"]
build-backend = "pdm.pep517.api"

[tool]
[tool.pdm]
include = ["broadcastlv"]
[tool.pdm.scripts]
test = { composite = [
    "coverage erase",
    "coverage run -m pytest -vv",
    "coverage report",
    "coverage html",
] }
lint = { composite = [
    "black .",
    "isort .",
] }
[tool.pdm.dev-dependencies]
dev = [
    "black~=22.12",
    "coverage~=7.0",
    "isort~=5.11",
    "pytest~=7.2",
]

[tool.coverage.run]
branch = true
source = ["broadcastlv"]
omit = ["tests/*", "test.py"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "^ *\\.\\.\\.$",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload",
    # don't complain __repr__ and __str__ and __repr_args__ for representation
    "def __repr__\\(self\\).+",
    "except ImportError:", # Don't complain about import fallback
]
partial_branches = [
    "pragma: worst case"
]
precision = 2

[tool.pytest.ini_options]
python_files = "tests/*"
filterwarnings = [
    "ignore::RuntimeWarning",
]

[tool.isort]
profile = "black"